from abc import ABC, abstractmethod

class Viewer(ABC):
    def __init__(self, title):
        self.title = title
        super().__init__()
    #sceneCollection contains the scenes that should be visible by UI Loader in different formats.
    sceneCollection = ["*******************************************************************************************************************************\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣴⣶⣶⣶⣶⣶⣯⣥⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⡴⠚⠋⠑⠋⠉⣀⣀⣤⣤⠤⠤⠖⠒⠛⠛⠿⢦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠋⠁⢀⣀⣴⡶⠟⠛⠉⠀⠀⠀⢀⣀⣀⣀⣀⣀⣀⣀⣉⣛⣦⡀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⠁⠀⢀⣴⡿⠋⠁⣀⣠⣴⡶⠶⠚⠋⠉⠉⠉⠉⠁⠀⠀⠈⠉⠉⠉⠉⢓⡶⠂⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⣠⣾⢫⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⡿⡭⠀⣴⣿⣯⣤⣶⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡞⠁⠀⠀⠀⠀\
										⠀⠀⠀⠀⣠⣤⡞⠛⢡⣧⣿⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡟⣰⠃⣼⣿⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⠏⠀⠀⠀⠀⠀⠀\
										⠀⠀⣴⠿⢋⡙⣆⣰⢿⣯⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⢿⡇⣿⣾⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣾⡿⢋⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⣿⠀⠛⣷⣸⢷⡿⡇⢹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡼⣿⣿⣿⣿⣿⣿⣿⣷⣶⣦⣤⣄⣀⣀⡀⠀⢀⣀⣀⣤⣶⡶⠿⠟⠛⠋⡶⠋⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⣿⣤⡴⠿⣿⣇⣀⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠟⠛⠛⢛⣻⡏⠉⠉⠀⠀⠀⠀⠀⢀⣠⠞⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠻⣿⡄⠈⢿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣾⣿⣿⡿⠿⢿⣿⣿⣿⣿⣷⣶⣴⣶⣚⡛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⣠⣶⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⢻⣿⣶⠚⠋⣹⣷⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⠟⠉⠀⠀⠀⣠⣾⠿⢿⣿⣿⣿⣿⣿⠿⣿⣿⣶⣶⣶⣶⣶⣖⣒⠚⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠈⣿⣿⣿⠛⢻⣿⣧⠀⠀⠀⣧⡀⢠⣾⣿⡇⣿⢻⠀⠀⠀⣴⠟⢁⣤⠶⠛⠛⠛⠛⢛⣿⣄⠀⠀⠈⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠘⣿⣿⣶⣿⣿⣿⣆⠀⢀⣇⣳⣾⡏⠈⠳⣼⡸⡄⢀⣼⣿⠟⠋⠀⣀⡠⠶⠶⠶⢦⣬⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠸⣿⣿⠉⠉⣿⣿⣼⣿⣿⣿⣿⡷⣄⠀⢹⣷⣻⣾⡿⠃⣀⢤⣞⣁⠀⠀⠀⢀⣀⠀⠉⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⢹⣿⣷⣾⣿⣿⣿⡜⣿⣿⡇⢹⣾⠿⠛⠛⠻⢿⣷⡶⠗⠛⠋⠙⠛⢦⡀⢀⡈⠓⣤⡀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣶⣾⣿⣿⠀⢿⣧⣹⣜⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⣳⡀⠈⠻⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⢿⣋⣀⡾⣿⣷⣿⡿⢤⣀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⠴⠾⣟⣷⢠⠀⢹⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠃⠏⣽⡿⠖⣛⣻⣿⡇⠀⠈⠓⠀⠀⠀⠀⠐⠒⠉⠉⠉⠀⠀⢀⣿⣿⡿⣆⣼⠇⠀⠀⠀⣠⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⢧⣴⣻⣶⣶⠿⠁⣸⢳⣀⡀⠀⠀⠀⠀⠀⠀⠀⢠⠤⠂⠀⠀⠘⢉⡏⠀⠹⣿⠀⠀⠀⣰⢣⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣟⣸⣧⠴⣿⣿⣿⡇⠉⠉⠀⠀⠀⠀⠀⠀⠘⠛⠒⠛⠛⠉⠀⠀⠀⣠⣿⡄⠀⣼⠃⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣯⠀⣸⣿⣇⢻⣧⠀⠀⠀⠀⠰⠀⠀⠀⠀⠀⢀⣀⣀⣀⣴⣶⠿⣻⡿⠁⣰⠃⠀⢸⣇⣠⣶⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⡆⣿⣿⠿⣎⢻⣷⣤⣤⣤⣤⣤⣶⣶⣿⣿⣿⠿⢟⣻⣭⠖⣻⠏⠀⠀⡿⣦⠀⣼⡟⣹⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⡇⢹⣄⢻⣭⣭⠶⠯⠥⠤⠤⠶⠖⣻⣿⡭⣴⣾⣿⣧⣤⣀⣰⠃⣿⢶⠇⢰⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣯⣻⠇⣼⣿⡄⢿⣶⣚⣋⣉⣛⣛⣯⣿⠽⠿⣾⡏⣸⡏⠉⣠⠟⢋⣾⡿⠃⣰⠏⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣾⢻⣿⣿⣾⣿⣿⣿⣿⡟⠛⠋⠀⢀⣾⣿⢷⣏⣤⡟⢃⣴⣿⠟⣡⣶⠇⣠⣟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⡷⠛⠒⠛⣉⣻⣿⣿⣧⣤⣴⠿⢻⣷⣯⣿⠞⢁⣴⣿⣿⣯⣴⣿⣿⠟⠛⢻⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣯⣦⣶⣾⣿⠿⠛⠻⣿⠟⠋⢁⣴⣿⣿⣿⡽⢖⣡⣶⣿⣿⣿⠿⠉⢀⣀⣤⣾⣥⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠚⣿⣿⣿⣿⣿⣿⠁⠀⠀⠉⣿⢀⣴⣿⣿⡿⠁⣿⣶⠾⢿⣿⣿⣿⣷⠖⢚⣉⣩⣴⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⠟⣿⣿⣿⣿⣤⣟⠙⣿⣿⣷⣿⡿⠋⠀⠀⣿⣤⠔⠚⣃⣼⣿⠯⠭⠭⠔⣺⣿⣷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣇⣰⢿⣿⢫⣿⣿⣿⣦⠘⢿⣿⡿⠀⠀⠀⠀⢻⣷⣴⣿⣿⣿⣿⣿⣿⣿⡏⢹⣿⢻⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⡿⠛⠋⣵⣿⣇⣿⣁⣿⡿⠿⠳⠾⣿⣿⡲⢶⣶⣶⣦⣿⠿⢿⡿⣿⣿⣿⣿⣿⡏⣸⡿⢸⣿⣎⢿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⢀⣠⣤⡤⠴⣒⣒⡛⣿⢿⡀⡰⣿⡟⠛⣼⣿⠋⠈⢿⡀⠀⠀⢸⣿⣿⣦⠹⣿⠿⣿⣷⣶⣼⣼⣿⣿⣿⠏⢸⡟⢁⡾⠛⠋⢸⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⢀⣤⣴⣿⣿⣷⣿⣿⠛⠛⠛⠻⢾⣿⣯⡿⢁⣠⣼⣿⣿⣶⣮⣽⡅⠀⠀⠀⢻⢻⣿⣿⣬⣷⣾⣿⣿⣿⣿⣿⣿⣿⠀⣿⠁⢸⡇⢀⣾⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⢸⣿⣿⣿⣿⣿⣿⣿⣿⠟⣠⣶⡶⠿⠉⠉⠛⣿⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⢸⣯⣿⣭⣏⠉⠿⠻⣿⣿⣿⣿⣿⡿⠀⢸⡄⢸⣇⠈⢿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠈⣿⣿⣿⣿⣿⣿⣿⣿⣼⣿⠉⣠⣾⣿⣿⣶⣮⡉⠙⠻⢿⣿⣿⣿⣿⣄⣺⣿⣿⠙⣿⡹⣅⣀⣠⣿⣿⣿⣿⣿⠃⣶⡀⠳⣦⡙⢳⣤⢉⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⡀⠻⣷⠙⣿⣿⣿⣿⣿⣿⣿⡀⢻⣿⠆⣨⣷⢸⢇⣾⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣷⠀⢿⣧⠸⣿⣿⣿⣿⣿⣿⣷⠈⣠⣾⢟⣳⠟⣼⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⡆⠈⣿⣧⠸⣿⣿⣿⣿⣋⣥⠞⠋⣱⠞⣡⣾⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠉⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣾⣴⠟⣹⣿⣿⣿⣿⣿⣿⣿⠀⢹⣿⣧⡸⣿⡟⡳⢦⣥⣤⡚⢧⣾⣿⣿⡟⠳⠦⣤⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⣴⣿⣏⣿⣿⡿⣿⣿⣿⣧⠀⣿⣿⣧⣹⣧⣿⣷⣶⣯⣿⣿⣿⡿⠿⣷⣿⣇⣸⡁⢹⡉⢻⣿⣿⣷⣶⣾⣧⡀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣾⣿⣟⣼⣿⣿⣿⣮⣝⢿⣌⣇⢸⣿⣿⡿⠹⣿⣿⣿⣿⡟⠙⢿⣿⣦⡇⣹⢿⡻⠿⣿⣷⣾⣧⣿⡌⣟⣋⣹⡇\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠋⠉⠛⠛⠛⠿⠛⠛⠛⠛⠛⠛⠻⢿⣿⡟⢻⣿⣿⣷⣯⣻⣇⣿⣿⡇⠀⠙⣿⠿⢿⡇⠀⠈⠻⣿⣿⣯⡀⡟⠲⣄⡀⠉⠉⠛⠛⠛⠛⠛⠁\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢾⢿⣿⡿⣯⠛⠙⣿⣿⡇⠀⣦⠙⣿⣦⣧⡀⠀⠀⠈⠻⣿⣿⣧⣀⡜⠹⡷⡶⣶⣶⣆⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣵⠁⢀⣲⣾⡿⢧⡀⣿⣷⢹⣿⠷⣽⣆⠀⠀⠀⠈⠙⠿⣿⣷⣼⡇⠘⣿⡍⣿⡀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⠀⠼⣿⠃⠹⣌⠳⣍⣿⡆⠏⠉⠉⣉⣳⠀⠀⠀⠀⠀⠀⠈⠙⠛⠶⠿⠷⠾⠷⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣾⣿⠏⠀⠀⢹⣷⣌⠛⠃⣧⡴⠿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣄⠀⠀⠀⠀⢹⣿⣿⣿⣁⠀⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
										 __        __   _                            _        \
										 \ \      / /__| | ___ ___  _ __ ___   ___  | |_ ___  \
										  \ \ /\ / / _ \ |/ __/ _ \| \'_ ` _ \ / _ \ | __/ _ \ \
										   \ V  V /  __/ | (_| (_) | | | | | |  __/ | || (_) |\
											\_/\_/ \___|_|\___\___/|_| |_| |_|\___|  \__\___/ \
  ____                                                        ____  _  __ _   _       _          _ _                  _     _ _ \
 / ___| _   _ _ __ ___  _ __ ___   ___  _ __   ___ _ __ ___  |  _ \(_)/ _| |_( )___  | |    ___ | (_) __ _  ___   ___| |__ (_) |\
 \___ \| | | | \'_ ` _ \| \'_ ` _ \ / _ \| \'_ \ / _ \ \'__/ __| | |_) | | |_| __|// __| | |   / _ \| | |/ _` |/ _ \ / __| \'_ \| | |\
  ___) | |_| | | | | | | | | | | | (_) | | | |  __/ |  \__ \ |  _ <| |  _| |_  \__ \ | |__| (_) | | | (_| | (_) | (__| | | | |_|\
 |____/ \__,_|_| |_| |_|_| |_| |_|\___/|_| |_|\___|_|  |___/ |_| \_\_|_|  \__| |___/ |_____\___/|_|_|\__, |\___/ \___|_| |_|_(_)\
                                                                                                     |___/      					\
																									 \
							 ____  ____  ____  ____  ____    ____    ____  __     ____  ____  __   ____  ____ \
							(  _ \(  _ \(  __)/ ___)/ ___)  (  __)  (_  _)/  \   / ___)(_  _)/ _\ (  _ \(_  _)\
							 ) __/ )   / ) _) \___ \\___ \   ) _)     )( (  O )  \___ \  )( /    \ )   /  )(  \
							(__)  (__\_)(____)(____/(____/  (____)   (__) \__/   (____/ (__)\_/\_/(__\_) (__) \
\
*******************************************************************************************************************************",
"years old!"
,"got hungry."
,"is died."
,"got thirsty."
,"is angry"
,"got sick"
,"got hungry."
,"Are you sure that you want to start a new champ? (This will delete the ongoing game)"
,"Are you sure that you want to turn off the device?"
,"is"
,"’s level up (birthday)"
,"’s HP:"
,"’s hunger satiety:"
,"’s thirst satiety:"
,"is"
,"*******************************************************************************************************************************\
									⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠍⠙⠺⠒⠻⢧⣀⠀⠀⠀⠀⠀⠉⢲⡀⠀⠀⠀⠉⠙⢶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
									⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠠⠖⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⣄⠀⠀⠀⠀⠀⠙⣤⠀⠀⠀⠀⠀⠙⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
									⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠖⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠤⣀⡀⠀⠀⠘⢦⡀⠀⠀⠀⠀⠻⡀⠀⡀⠀⠀⠀⠀⢻⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
									⣄⣀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣠⠴⠶⠚⠋⠀⣀⡀⣀⣤⠔⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠲⢤⡀⠈⢷⣦⠀⠀⠀⢀⣹⠞⠀⠀⠀⠀⠀⠘⣟⢆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
									⠘⢿⡳⠦⣤⣀⣀⣀⣈⣙⣳⣶⣤⠴⠶⠒⣫⠽⠊⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⢸⣋⣀⡤⣴⡿⠥⣤⣀⡀⠀⠀⠀⠀⠘⠸⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
									⠀⠈⠙⠦⣄⡀⠀⠀⠀⠁⠀⠀⣀⣤⠄⠈⠀⠀⢀⣤⣤⣤⣤⣤⣤⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⢀⣴⢾⣻⡿⠾⠿⠂⠀⠀⠉⠙⠲⣄⡀⠀⠀⠀⠘⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\
									⠀⠀⠀⠀⠀⠈⠙⠛⠒⠦⣤⠾⠛⠁⠀⣠⣴⣾⠝⠛⠉⠉⠛⠉⠉⢿⣿⣯⣓⣶⠒⢛⣻⣷⣿⣿⡀⣾⡏⠀⠀⠀⢀⣴⣲⠆⠀⠀⠈⠻⣧⡀⠀⠀⢸⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀\
									⠀⠀⠀⠀⠀⠀⣠⣤⢞⠏⠁⠀⠀⢠⣾⠟⠋⠀⠀⠀⣤⣠⠂⠀⠀⠈⠛⣿⠙⣿⡻⠿⠭⠥⣿⣿⣧⠹⣄⠀⢀⡴⣻⠞⠁⠀⠀⠀⠀⠀⢹⣷⠀⢄⡎⠹⣆⠀⠀⠀⠀⠀⠀⠀⠀\
									⠀⠀⠀⠰⠾⠛⠛⠉⠛⠋⠀⠀⣰⡟⡱⠂⠀⠀⣠⡾⣵⠃⠀⠀⠀⣠⢿⣿⠘⣦⠔⠒⠛⠚⠻⣿⡚⠀⢩⡷⣯⣞⠁⠀⠀⠀⠀⣤⠀⢠⣼⢿⡄⢸⡇⠀⢸⣆⠀⠀⠀⠀⠀⠀⠀\
									⠀⠠⢤⣤⣀⠀⠀⣀⠀⠀⠀⠘⢿⣽⠇⠀⠀⠘⡿⠟⠁⣀⣤⢴⣿⣵⠛⣽⣿⠟⠀⠀⠀⠀⢀⣼⠿⣶⠋⠀⢀⡿⡝⠛⣒⣶⡶⠻⣿⡋⢹⡜⣧⡞⠀⢠⢿⠙⣇⠀⠀⠀⠀⠀⠀\
									⠀⠀⠀⠀⠀⠀⣰⠃⠀⠀⠀⠀⢸⡿⣿⣶⣷⣿⢛⡛⠉⠁⢿⠁⣀⣴⡿⠛⠀⠀⠀⠀⢀⣴⡿⢫⡤⠒⠛⣷⣾⣼⠁⢀⣿⡇⠄⠀⢿⣷⣬⣿⣏⠀⣰⣧⠋⢠⡿⠀⠀⠀⠀⠀⠀\
									⠀⢀⣤⠔⢃⡜⠁⠀⢀⡜⠁⢀⣼⢷⣀⢸⠇⠀⠀⣧⣀⣠⣼⣿⡿⣯⠟⠀⠀⠀⣠⣴⣿⠋⠀⠀⠀⠀⣼⣣⣿⠉⠉⠙⠛⠛⠻⣿⣿⣿⣿⣿⣿⣴⠟⠁⢀⢻⡇⠀⠀⠀⠀⠀⠀\
									⣾⣧⣤⣴⠋⠀⢀⡴⠋⠀⢠⣸⠃⢠⡟⠛⠛⠻⠻⣿⠟⢋⣵⢿⠟⠁⣀⠤⠚⣩⢿⠟⠀⠀⠀⠀⣠⡾⠞⣽⠋⠀⠀⠀⠀⠀⠀⠀⢻⡏⢿⣿⣿⡇⠀⢀⣰⣿⠁⠀⠀⠀⠀⠀⠀\
									⠐⣫⡟⢁⣤⣾⠏⠀⠀⣰⣿⠃⠀⡾⠁⠀⠀⠀⣰⠁⣰⠛⠁⣠⠴⠚⠁⣠⣾⣡⠋⠀⠀⠀⣠⣾⠟⢀⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠈⣷⣾⣿⣿⡇⢀⣿⢿⡿⠀⠀⠀⠀⠀⠀⠀\
									⠾⠛⠛⠉⣼⠏⠀⠀⡼⣿⠃⢰⢿⠇⠀⠀⠀⣼⣡⢞⠝⠀⠈⠀⠀⢀⡴⠋⢠⠏⠀⠀⠀⣴⠟⠁⠀⠋⠀⠀⠀⠀⠀⣀⣤⣄⡀⠀⠀⢸⡿⢻⣿⣧⢘⢸⢰⡇⠀⠀⠀⠀⠀⠀⠀\
									⠀⠀⠀⣸⠏⠀⢀⡜⢱⡇⢀⡎⡼⠀⠀⠀⠀⡷⣧⠋⠀⠀⠀⠀⡴⠋⠀⣠⠏⠀⣀⡴⠞⠁⠀⠀⠀⠀⠀⣀⣤⠾⠛⠁⠀⠈⠉⠀⠀⠘⢿⠋⣿⣿⡼⣸⣿⠁⠀⠀⠀⠀⠀⠀⠀\
									⠀⠀⢰⡏⠀⢀⡞⢀⡾⠀⡼⢡⡇⠀⠀⠀⣼⡿⠁⠀⠀⠀⣠⠞⠁⣠⣼⣣⣶⡵⠟⠀⠀⠀⠀⢀⣠⣴⣾⣿⣿⣭⣭⣭⣿⣶⣦⣴⡀⠀⢹⠀⣿⣿⣇⢹⡇⠀⠀⠀⠀⠀⠀⠀⠀\
									⠀⠀⡟⠀⢠⡏⠀⣼⡇⢰⡇⢸⠃⠀⠀⣸⠏⠀⠀⠀⢀⡼⣋⣴⣾⣿⣯⣿⠿⠥⠀⠀⠀⠀⠈⠋⠉⣽⠿⠟⠙⠿⢿⣿⣿⢉⣿⠋⠁⠀⢸⣷⣿⣿⣧⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀\
									⠀⢰⡇⢀⡞⠀⣼⣿⠀⡾⠀⣼⠀⠀⢰⠃⠀⠀⢀⣴⣿⠅⢉⣶⠸⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⣀⣀⣀⣀⣽⣿⡿⠅⠀⠀⠀⣿⣿⢞⣇⠈⢷⣦⡀⠀⠀⠀⠀⠀⠀⠀\
									⠀⢸⡇⢸⠁⢰⣿⡇⢰⡇⠀⢿⠀⢀⡏⠀⠀⠀⣹⣿⣿⣶⣀⣉⣳⣴⠀⠀⠀⠀⠀⢢⠀⠀⠀⠀⠀⠀⠀⠉⢩⣉⡉⠙⣡⢀⣤⠀⠀⢸⣿⠃⡞⢹⣶⣾⣿⣇⠀⠀⠀⠀⠀⠀⠀\
									⠀⠀⢷⡏⠀⣼⢻⠃⣸⠁⠀⢸⣠⡟⠀⠀⠀⣰⣿⠁⠛⠉⠛⠋⠉⠁⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⡏⠀⡿⠀⣿⠀⠀⣾⣇⡼⢃⡼⠇⡿⢡⣾⣧⡀⠀⠀⠀⠀⠀\
									⠀⠀⢸⡇⢰⡏⣾⠀⣿⠀⠀⢸⡿⠀⠀⠀⢀⣿⢻⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣰⠃⠀⡇⠀⢰⣿⣋⣴⣾⠶⣞⣡⣾⡇⣿⠇⠀⠀⠀⠀⠀\
									⠀⠀⢸⡇⣸⠃⣿⠀⡏⠀⠀⣼⢻⡇⠀⠀⣼⣿⠘⢻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠟⠀⠈⠁⢀⣾⠟⠉⣰⣿⣷⣾⣿⣿⢧⡇⠀⠀⠀⠀⠀⠀\
									⠀⠀⠈⡇⡟⠀⣿⠀⡆⠀⢰⡇⣾⠀⠀⠀⣿⣿⠀⣼⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣠⣾⣿⣿⣿⣿⡿⠉⡟⠀⠀⠀⠀⠀⠀⠀\
									⠀⠀⠀⢹⡷⠀⣿⣄⠃⠀⣸⢻⣿⠀⠀⠀⣿⣿⢠⣿⣿⢷⡀⠀⠀⠀⠀⠀⢀⣀⠀⣀⣀⢀⣀⡤⢤⣄⡴⠖⠀⠀⠀⠀⠀⣴⠟⠉⣿⣿⣿⣿⣿⣿⡟⠇⢸⠇⠀⠀⠀⠀⠀⠀⠀\
									⡀⠀⠀⠀⠳⠀⠘⣟⠇⠀⣿⣿⣿⡄⠀⠀⣿⣿⢸⣿⣿⣌⣿⣦⡀⠀⠀⣀⡤⣿⣫⠿⠛⠻⠷⠖⠋⠉⠀⠀⠀⠀⠀⣠⣾⢿⠀⠀⣿⣿⣿⣿⣿⡟⠁⠀⡼⠀⠀⠀⠀⠀⠀⠀⠀\
									⡽⢻⡶⣶⣶⣦⣄⣹⡀⣸⣿⣿⢻⣷⡄⠀⣿⣏⣾⣟⣛⣙⣼⣿⣿⠖⣋⡽⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣾⢟⣿⠀⠀⠀⣿⣿⣿⣿⡟⠁⢀⡸⠁⠀⢠⡖⠢⣄⠀⠀⠀\
									⠀⠈⠁⠀⠘⠛⠛⠻⣷⣸⣿⡿⠄⠘⣿⡀⠟⠀⠈⣿⡿⡛⣫⣤⠶⣿⣿⣦⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⢻⣷⢻⡟⠀⠀⠀⣿⣿⣿⡿⠁⢠⡾⠃⠀⠀⢸⡇⠀⠀⠁⠀⠀\
									⡀⢀⣄⠀⠀⠀⠀⠀⠸⡏⣹⣧⠀⠀⢸⣷⡀⣾⠟⢥⠖⠟⠉⠀⢠⣿⣿⠿⠟⠻⠦⣄⡀⠀⠀⢀⣠⣴⠟⢛⣏⣉⠁⣿⡇⢠⠀⣷⣿⣿⣿⠁⣠⡞⠁⠀⠀⠀⢸⡇⠀⠀⠀⠀⠈\
									⠛⢦⣟⣷⣄⠀⠀⠀⠀⢳⡘⢻⣧⡀⠀⢿⡟⢥⠀⡀⠀⢠⣶⡷⣦⣿⣿⣤⡀⠀⠀⠈⠉⠛⣫⡽⠋⠀⠀⠈⣹⣧⣼⣿⡇⣼⠀⢿⣿⡿⢣⣿⡟⠀⠀⢀⣠⣤⣾⡇⠀⠀⠀⠀⠀\
									⠀⠙⠛⢟⣿⣷⣤⡀⠀⠈⠁⠀⠙⢷⡀⠈⣷⡀⠈⠀⣤⣾⠋⣻⣿⠃⠘⠻⣿⣟⣛⣛⣲⠟⢥⣴⣶⣲⣴⣿⣿⣿⣿⣿⡇⣿⡆⢸⡿⢱⣿⣿⠟⠲⢻⣽⣼⣿⡟⠃⠀⠀⠀⠀⠀\
									⠀⠀⠀⠀⠈⠳⣽⣧⡀⠀⠀⠀⠀⠈⢿⣦⡈⢿⡀⣤⣿⣽⠾⠻⣟⡤⣠⠐⠚⠛⣦⡛⢿⣿⣷⣦⡤⢾⣛⡿⢛⣿⣻⣿⣷⢸⣷⠟⢸⡏⣾⡇⢀⢀⣿⣿⠿⠉⡇⠀⠀⠀⠀⠀⡜\
									⠀⠀⠀⠀⠀⠀⠈⠙⢿⡀⠀⠀⠀⠀⠰⣿⣧⠈⢿⡁⠉⠀⠀⠀⠈⠻⣦⣔⣥⣾⣿⡿⠷⣈⣛⣷⣞⣯⣫⣴⣿⣿⣿⣿⡌⣻⡿⢰⡏⠀⢹⣧⣮⣾⠋⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀\
									⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣆⠀⠀⠀⠀⠙⣟⣧⡀⠹⡄⠀⠀⠀⠀⠀⠀⠉⢛⣷⣷⣿⣿⢾⣿⣶⣭⣿⣿⣿⠿⠋⢙⣿⣿⡿⠁⡿⠀⠀⠘⣿⡏⠀⠀⠀⠀⠀⠀⣀⡄⠀⠈⠀⠀\
									⠀⠀⠀⠀⠀⠀⠀⠀⠀⠨⠟⢧⡀⠀⠀⡀⡿⣿⣷⡀⠹⡆⠀⠀⠀⠀⢀⡴⠋⠀⠛⠉⣽⡿⣟⣿⣿⠉⠁⠀⠀⠀⠀⠘⢻⠃⠼⠻⣄⠀⠀⠸⡇⠀⠀⢀⣤⣶⡿⠋⠀⠀⠀⠀⠀\
									⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢡⣧⠏⣿⣿⣄⠹⣤⠀⣠⠴⠋⠀⠀⠀⠀⢸⣿⣼⣾⣿⣿⠀⠀⠀⠀⠀⠀⠀⡿⠀⠀⠀⠸⣄⠀⠀⢇⠀⠈⢹⣿⣿⠃⠀⠀⠀⠀⠀⠀\
									⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣾⡼⡝⣿⣄⠹⣿⡉⠀⠀⠀⠀⠀⠀⠀⠛⠻⠿⠿⠿⠀⠀⠀⠀⠀⠀⣼⠁⠀⠀⠀⠀⠹⡄⠀⢸⡄⠀⠈⢯⢇⠀⠀⠀⠀⠀⠀⠀\
									⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⡅⡇⡏⢻⡀⠘⣟⠶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣏⠀⠀⠀⠀⠀⠀⢹⡄⠈⡇⠀⠀⠈⢿⢆⠀⠀⠀⠀⠀⠀\
									⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠱⣿⠁⠀⣷⠀⣿⠀⠈⠉⠓⠶⢤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠿⡄⠀⠀⠀⠀⠀⠈⢧⠀⢹⡀⠀⠀⠈⢿⣆⠀⠀⠀⠀⠀\
									⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⠀⠀⠸⡄⣿⠀⣄⣀⣀⣀⣀⣈⣉⣻⣲⣶⣄⣰⡊⣿⠉⢹⢯⠉⠹⡄⠀⠀⠀⠀⠀⢸⡆⠸⢧⠀⢣⠀⠈⢿⣆⠀⠀⠀⠀\
									⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠄⠴⢻⡟⠀⠀⠀⣧⡏⠀⠀⠀⢀⠉⡉⢩⢿⣋⣻⣿⣿⣿⣿⢻⢀⣼⣾⣃⣠⡿⣆⠀⠀⠀⠀⠀⢹⡀⠘⡇⠀⢣⡀⠀⠹⣧⠀⠀⠀\
									⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⢀⡰⠋⠀⠀⠀⠀⣿⠠⠀⢀⣴⣿⣨⣷⢟⡾⣱⣿⣿⠿⠛⠛⠚⠚⠲⠞⠋⠁⠀⢿⣧⣦⢀⣶⡆⡸⡇⠀⢹⡄⠈⢧⡀⠀⠙⢧⡀⠀\
									⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⢀⣠⡞⠁⠀⠀⠀⠀⣠⡿⠀⣰⢟⠊⣵⣱⣋⢟⣾⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣻⠋⠊⡜⠁⢷⠀⠈⢧⠀⠀⢣⡀⠀⠀⠱⢄\
\
\
	   __       _ _                  _     _     _           \
	  / /  ___ | (_) __ _  ___   ___| |__ (_)   | |__  _   _ \
	 / /  / _ \| | |/ _` |/ _ \ / __| \'_ \| |   | \'_ \| | | |\
	/ /__| (_) | | | (_| | (_) | (__| | | | |   | |_) | |_| |\
	\____/\___/|_|_|\__, |\___/ \___|_| |_|_|   |_.__/ \__, |\
					|___/                              |___/ \
\
	  /$$$$$$                                     /$$$$$$      /$$$$$$$$ /$$                     /$$                   /$$    \
	 /$$__  $$                                   /$$__  $$    |__  $$__/| $$                    | $$                  | $$    \
	| $$  \ $$ /$$$$$$$   /$$$$$$       /$$$$$$ | $$  \__/       | $$   | $$$$$$$   /$$$$$$     | $$        /$$$$$$  /$$$$$$  \
	| $$  | $$| $$__  $$ /$$__  $$     /$$__  $$| $$$$           | $$   | $$__  $$ /$$__  $$    | $$       /$$__  $$|_  $$_/  \
	| $$  | $$| $$  \ $$| $$$$$$$$    | $$  \ $$| $$_/           | $$   | $$  \ $$| $$$$$$$$    | $$      | $$  \ $$  | $$    \
	| $$  | $$| $$  | $$| $$_____/    | $$  | $$| $$             | $$   | $$  | $$| $$_____/     | $$      | $$  | $$  | $$ /$$\
	|  $$$$$$/| $$  | $$|  $$$$$$$    |  $$$$$$/| $$             | $$   | $$  | $$|  $$$$$$$    | $$$$$$$$|  $$$$$$/  |  $$$$/\
	 \______/ |__/  |__/ \_______/     \______/ |__/             |__/   |__/  |__/ \_______/    |________/ \______/    \___/  \
                                                                                                                                \
\
*******************************************************************************************************************************\
",
"Tipp: If you want to heal your champion press the D button.",
"For nagivation use the C and D buttons.",
"Tipp: If you want to feed your champion press the B button",
"Tipp: If you want to drink your champion pressthe C button",
"Tipp: If you want to play with your champion press the E button.",
"Tipp: If you want to open the statistics & pause menu press F button.",
"Tipp: If you want to turn of the device and exit press the A button."]

    @abstractmethod
    def UILoader(self, sceneID, champion=0):
        """
        Load the different UI scenes by the given argument, which is an ID of a static collection.
        The sceneID parameter is indexed from 1. 
        Implementation is in progress. (The logical sorting working curretnly, but not with the official and final view engine, just a print currently)
        """
        if(sceneID > len(self.sceneCollection)):
            raise Exception("The given sceneID is not valid in the current context, it cant index any scene from the collection.")
        if(sceneID == 1): #Welcome scene
            print(self.sceneCollection[sceneID-1])
        elif(sceneID > 1 and sceneID < 9 ): #One of the event scenes
            if(champion == 0):
                 raise Exception("For this kind of UI Loading a cchampion is required too. Please give a valid champion as a third parameter.")
            if(sceneID == 2):
                print(f"{champion.name} got {champion.age} {self.sceneCollection[sceneID-1]}")
            else:
                print(f"{champion.name} {self.sceneCollection[sceneID-1]}")
        elif(sceneID > 8 and sceneID < 11 ):
            print(f"{self.sceneCollection[sceneID-1]}")
        elif(sceneID > 10 and sceneID < 17 ):  
             if(champion == 0):
                 raise Exception("For this kind of UI Loading a cchampion is required too. Please give a valid champion as a third parameter.")
             else:
                 if(sceneID==11):
                     print(f"{champion.name} {self.sceneCollection[sceneID-1]} {champion.age} old.")
                 elif(sceneID==12):
                     print(f"Minutes till {champion.name}{self.sceneCollection[sceneID-1]} {champion.CalculateTheTimeTillLevelUp()}.")
                 elif(sceneID==13):
                     print(f"{champion.name}{self.sceneCollection[sceneID-1]} {champion.hp}.")
                 elif(sceneID==14):
                     print(f"{champion.name}{self.sceneCollection[sceneID-1]} {champion.hunger}.")
                 elif(sceneID==15):
                     print(f"{champion.name}{self.sceneCollection[sceneID-1]} {champion.thirst}.")
                 elif(sceneID==16):
                     print(f"{champion.name}{self.sceneCollection[sceneID-1]} {'is not' if champion.isSick else ''} sick currently.")
        elif(sceneID == 17 ):  
            print(self.sceneCollection[sceneID-1])
        elif(sceneID > 17 and sceneID < 25 ):  
            print(self.sceneCollection[sceneID-1])
        pass
    
    @abstractmethod
    def MenuLoader(self, menuID):
        """
        Load the different menus by the given argument, which is an ID of a static collection.
        Implementation is in progress.
        """
        pass  

    @abstractmethod
    def ImageLoader(self, image):
        """
        Load the different menus by the given argument, which is an image in a specified raw format.
        Implementation is in progress.
        """
        pass

    @abstractmethod
    def ChampionSelector(self, champion):
        """
        Its a special UILoader, because this function require a champion which is the selected champion which we want to grow,
        and with this information this function will set the enviromental informations, and load the graphics.
        Implementation is in progress.
        """
        pass

    @abstractmethod
    def refresh(self):
        """
        Refresh the contents of the view.
        Implementation is in progress.
        """
        pass

    @abstractmethod
    def close(self):
        """
        Close the viewer.
        Implementation is in progress.
        """
        pass